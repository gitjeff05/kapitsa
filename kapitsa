#!/bin/bash

set -e

# Define a few colors for output
# https://misc.flogisoft.com/bash/tip_colors_and_formatting#terminals_compatibility
CL_DEF="\033[39m\033[49m"
CL_RED="\033[31m"
CL_CYA="\033[36m\033[40m"
CL_YEL="\033[33m\033[40m"

SEARCH_DOMAIN="$1"

# Check if the KAPITSA env var has been set
checkIfKapitsaEnv() {
    if [ -z "$KAPITSA" ]; then
        return 1
    else
        return 0
    fi
}

# Print .kapitsa config example
printConfigInfo() {
    echo -e "Kapitsa uses a json configuration file to know where to search for .ipynb files.\nThe value of \"path\" in the ${CL_CYA}.kapitsa${CL_DEF} config file must point to a valid path."
    echo "Multiple paths are allowed but must be separated by a colon (:)"
    echo -e "Only absolute paths or paths using the ${CL_CYA}\$HOME${CL_DEF} environment variable are valid.\n"
    echo -e "For example \"${CL_CYA}\$HOME/path/to/dir:/Users/everyone/notebooks${CL_DEF}\" is valid"
    echo -e  "while \"${CL_CYA}\$NOTEBOOKS/dir:/Users/everyone/notebooks${CL_DEF}\" is not because \$NOTEBOOKS is not allowed.\n"
    echo "{\"path\":\"\$HOME/projects:\$HOME/github\",\"ignore\":[\".ipynb_checkpoints/*\"],\"namespace\":\"kapitsa\"}" | jq .
}

# Before we begin, make sure the $KAPITSA env variable is set.
if checkIfKapitsaEnv; then

    # Make sure $KAPITSA is pointing to a file.
    if [ ! -f "$KAPITSA" ]; then
        echo -e "${CL_RED}Error${CL_DEF}: Could not find ${CL_CYA}.kapitsa${CL_DEF} configuration file at ${CL_CYA}$KAPITSA${CL_DEF}.\n"
        printConfigInfo
        exit 1
    fi

    # Make sure the json file has a path key and that it is a string
    if [ ! "$(jq '. | select(.path|type=="string")' < "$KAPITSA")" ]; then
        echo -e "${CL_RED}Error${CL_DEF}: Invalid or missing required key \"path\" in json file.\n"
        printConfigInfo
        exit 1
    fi

    # Get a list of paths on separate lines
    path_list=$(jq '.path' < "$KAPITSA" | tr -d '[][:space:]"' | tr ':' '\n')
    
    # If path contains $HOME, ensure that it is defined
    if [[ $path_list =~ "\$HOME" ]]; then
        if [ -z "${HOME}" ]; then
            printf "You specified \$HOME in your \"path\" but your \$HOME environment variable is not set.\n\n"
            printf "\"path\": \"%s\"\n\n" "$(jq '.path' < "$KAPITSA" | tr -d '[][:space:]"')"
            printConfigInfo
            exit 1
        fi
    fi

    # replace string $HOME with expanded shell variable $HOME
    paths="${path_list//\$HOME/$HOME}"
    
    # Run the search on each directory specified
    echo "$paths" | while IFS= read -r directory; do

        # break out if directory is not valid
        if [ ! -d "$directory" ]; then
            echo -e "${CL_YEL}Warning${CL_DEF}: $directory not a valid directory. Make sure your ${CL_CYA}.kapitsa${CL_DEF} config file contains a valid directory."
            break
        fi

        # Get a list of all the files to iterate over
        files_list=$(find "$directory" -type f -name '*.ipynb' \! -path "*ipynb_checkpoints*" -prune -print)

        # For every notebook file found in this directory perform the search
        echo "$files_list" | while IFS= read -r notebook_file; do
            
            # Find any cells that are code blocks and that contain the metadata attribute kapitsa
            kapitsa_cells=$( (jq -r '.cells[] | select( (.cell_type == "code") and (.metadata.tags | type == "array") ) | { tags: .metadata.tags, source }' ) < "$notebook_file")
            
            # If there was a match, print the results
            if [ ${#kapitsa_cells} -ge 1 ]; then
                
                # If program was run with just `kapitsa` then return everything
                if [ -z "${SEARCH_DOMAIN}" ]; then
                    out=$(echo "$kapitsa_cells" | jq -c '. | { source, tags: .tags | join(" ") }')
                    total_len=$(echo "$out" | jq -s '. | length')
                    echo -e "\nFound ${CL_YEL}$total_len${CL_DEF} tagged cells in ${CL_CYA}$notebook_file${CL_DEF}\n"
                    echo "$out" | jq '.'
                    break
                fi

                cells_with_key=$(echo "$kapitsa_cells" | jq --arg foo "$SEARCH_DOMAIN" '. | select( .tags | join(" ") | test($foo, "ig") ) | { source, tags: .tags | join(" ") }')
                total_len=$(echo "$cells_with_key" | jq -s '. | length')
                echo -e "\nFound ${CL_YEL}$total_len${CL_DEF} tagged cells matching pattern $SEARCH_DOMAIN in ${CL_CYA}$notebook_file${CL_DEF}\n"
                echo "$cells_with_key" | jq .                

            fi

        done;

    done;

else
    echo -e "${CL_RED}Error:${CL_DEF} 'KAPITSA' env variable not set. Set ${CL_CYA}KAPITSA${CL_DEF} to the path of your ${CL_CYA}.kapitsa${CL_DEF} config file."
    printf 'Either run the following or manually add it to %s/.bash_profile (or similar)\n\n' "$HOME"
	echo -e "${CL_CYA}export${CL_DEF} KAPITSA=\"\$HOME/.kapitsa\"\n"
    printConfigInfo
fi
