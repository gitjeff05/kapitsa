#!/bin/bash

set -e
CL_DEF="\033[39m"
CL_RED="\033[31m"
CL_CYA="\033[36m"

SEARCH_STR="$1"
META_SEARCH=".metadata.kapitsa.$SEARCH_STR"
echo "$META_SEARCH"
# Check if the KAPITSA env var has been set
checkIfKapitsaEnv() {
    if [ -z "${KAPITSA}" ]; then
        return 1
    else
        return 0
    fi
}

# Print .kapitsa config example
printConfigInfo() {
    echo "The .kapitsa config json requires a key, \"path\" whos value must point to a directory."
    echo "Multiple directories are allowed but must be separated by a colon (:)"
    printf "\nOnly absolute paths or paths using the \$HOME environment variable are valid values for \"path\".\n"
    echo "For example \"\$HOME/path/to/dir:/Users/everyone/notebooks\" is valid"
    printf "while \"\$NOTEBOOKS/dir:/Users/everyone/notebooks\" is invalid because \$NOTEBOOKS is not allowed.\n\n"
    echo "{\"path\":\"\$HOME/projects:\$HOME/github\",\"ignore\":[\".ipynb_checkpoints/*\"],\"namespace\":\"kapitsa\"}" | jq .
}

# Before we begin, make sure the $KAPITSA env variable is set.
if checkIfKapitsaEnv; then

    # Make sure $KAPITSA is pointing to a file.
    if [ ! -f "$KAPITSA" ]; then
        echo -e "Default \e[91mLight red"
        echo -e "\e[91mError: Could not find .kapitsa configuration file at $KAPITSA."
        printConfigInfo
        exit 1
    fi

    # Make sure the json file has a path key and that it is a string
    if [ ! "$(jq '. | select(.path|type=="string")' < "$KAPITSA")" ]; then
        printf "Error: Invalid or missing required key \"path\" in json file.\n\n"
        printConfigInfo
        exit 1
    fi

    # Get a list of paths on separate lines
    path_list=$(jq '.path' < "$KAPITSA" | tr -d '[][:space:]"' | tr ':' '\n')
    
    # If path contains $HOME, ensure that it is defined
    if [[ $path_list =~ "\$HOME" ]]; then
        if [ -z "${HOME}" ]; then
            printf "You specified \$HOME in your \"path\" but your \$HOME environment variable is not set.\n\n"
            printf "\"path\": \"%s\"\n\n" "$(jq '.path' < "$KAPITSA" | tr -d '[][:space:]"')"
            printConfigInfo
            exit 1
        fi
    fi

    # replace string $HOME with expanded shell variable $HOME
    paths="${path_list//\$HOME/$HOME}"
    
    # Run the search on each directory specified
    echo "$paths" | while IFS= read -r directory; do

        # break out if directory is not valid
        if [ ! -d "$directory" ]; then
            printf "\nWarning: %s could not be searched because it is not a valid directory. Make sure your .kapitsa config file contains a valid directory.\n" "$directory"
            break
        fi

        echo "Searching: ${directory}"

        # Get a list of all the files to iterate over
        files_list=$(find "$directory" -type f -name '*.ipynb' \! -path "*ipynb_checkpoints*" -prune -print)

        # echo '{ "matplotlib": 42, "bar": "less interesting data"}' | jq --arg foo "$1" '.[$foo]'
        # echo '[{ "matplotlib": 42, "bar": "less interesting data"},{ "pandas": 42, "bar": "less interesting data"}]' | jq --arg foo "$1" 'map(has("pandas"))'
        echo '[{ "matplotlib": 42, "bar": "less interesting data"},{ "pandas": 42, "bar": "less interesting data"}]' | jq --arg foo "$1" 'map(select(has($foo)))'

        # For every notebook file found in this directory perform the search
        echo "$files_list" | while IFS= read -r notebook_file; do
            
            # Use jq to search the json for matches
            kapitsa_cells=$( (jq '.cells[] | select( (.cell_type == "code") and (.metadata.kapitsa | type == "object") ) | { kapitsa: .metadata.kapitsa, source }' ) < "$notebook_file")
            
            # If there was a match, print the results
            if [ ${#kapitsa_cells} -ge 3 ]; then
                echo "$notebook_file"
                # this works but select cannot seem to expand "$foo"
                # echo "$kapitsa_cells" | jq --arg foo ".kapitsa.pandas" '. | select(.kapitsa.matplotlib | type == "array")'
                # try
                # https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq-select
                echo "$kapitsa_cells" | jq --arg foo "$1" '. | .kapitsa | select(has($foo))'
            fi

        done;

    done;

else
    echo -e "${CL_RED}Error:${CL_DEF} 'KAPITSA' env variable not set. Set ${CL_CYA}KAPITSA${CL_DEF} to the path of .kapitsa config file."
    printf 'Manually add the following to %s/.bash_profile (or similar)\n\n' "$HOME"
	printf "export KAPITSA=\"\$HOME/.kapitsa\"\n\n"
    printConfigInfo
fi
